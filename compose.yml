
services:
  #Mattermost DB postgres
  postgres:
    image: postgres:${POSTGRES_IMAGE_TAG}
    restart: ${RESTART_POLICY}
    security_opt:
      - no-new-privileges:true
    pids_limit: 100
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    volumes:
      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data
    environment:
      # timezone inside container
      - TZ

      # necessary Postgres options/variables
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB

  mattermost:
    depends_on:
      - postgres
    image: mattermost/${MATTERMOST_IMAGE}:${MATTERMOST_IMAGE_TAG}
    restart: ${RESTART_POLICY}
    security_opt:
      - no-new-privileges:true
    pids_limit: 200
    read_only: ${MATTERMOST_CONTAINER_READONLY}
    tmpfs:
      - /tmp
    labels:
      traefik.enable: "true"
      traefik.http.routers.manager.rule: Host(`chat.badger.lan`)
      traefik.http.routers.manager.entryPoints: web  
    volumes:
      - ${MATTERMOST_CONFIG_PATH}:/mattermost/config:rw
      - ${MATTERMOST_DATA_PATH}:/mattermost/data:rw
      - ${MATTERMOST_LOGS_PATH}:/mattermost/logs:rw
      - ${MATTERMOST_PLUGINS_PATH}:/mattermost/plugins:rw
      - ${MATTERMOST_CLIENT_PLUGINS_PATH}:/mattermost/client/plugins:rw
      - ${MATTERMOST_BLEVE_INDEXES_PATH}:/mattermost/bleve-indexes:rw
      # When you want to use SSO with GitLab, you have to add the cert pki chain of GitLab inside Alpine
      # to avoid Token request failed: certificate signed by unknown authority 
      # (link: https://github.com/mattermost/mattermost-server/issues/13059 and https://github.com/mattermost/docker/issues/34)
      # - ${GITLAB_PKI_CHAIN_PATH}:/etc/ssl/certs/pki_chain.pem:ro
    environment:
      # timezone inside container
      - TZ

      # necessary Mattermost options/variables (see env.example)
      - MM_SQLSETTINGS_DRIVERNAME
      - MM_SQLSETTINGS_DATASOURCE

      # necessary for bleve
      - MM_BLEVESETTINGS_INDEXDIR

      # additional settings
      - MM_SERVICESETTINGS_SITEURL

  # netmap:
  #  image: markmanx/isoflow:latest
  #  restart: always
  #  ports:
  #    - 3001:3001
  #  environment:
  #    - VIRTUAL_HOST=netmap.badger.lan
  #  volumes:
  #    - isoflow_data:/opt/isoflow/data

  manager:
    image: portainer/portainer-ce:latest
    restart: ${RESTART_POLICY}
    labels:
      traefik.enable: "true"
      traefik.http.routers.manager.rule: Host(`manager.badger.lan`)
      traefik.http.routers.manager.entryPoints: web
#      traefik.http.services.manager.loadbalancer.server.port: 3002
    ports:
      - 3002:3002
    environment:
      - VIRTUAL_HOST=manager.badger.lan
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/opt/portainer

  e1:
    image: etherpad/etherpad:latest
    restart: ${RESTART_POLICY}
    labels:
      traefik.enable: "true"
      traefik.http.routers.e1.rule: Host(`e1.badger.lan`)
      traefik.http.routers.e1.entryPoints: websecure
      traefik.http.routers.e3.tls.certresolver: le
#      traefik.http.services.e1.loadbalancer.server.port: 9001
    ports:
      - 9001:9001
    environment:
      - VIRTUAL_HOST=e1.badger.lan
    volumes:
      - e1_data:/opt/etherpad-lite/var

  e2:
    image: etherpad/etherpad:latest
    restart: ${RESTART_POLICY}
    labels:
      traefik.enable: "true"
      traefik.http.routers.e2.rule: Host(`e2.badger.lan`)
      traefik.http.routers.e2.entryPoints: web
#      traefik.http.services.e2.loadbalancer.server.port: 9002
    ports:
      - 9002:9002
    environment:
      - VIRTUAL_HOST=e2.badger.lan
    volumes:
      - e2_data:/opt/etherpad-lite/var

  e3:
    image: etherpad/etherpad:latest
    restart: ${RESTART_POLICY}
    labels:
      traefik.enable: "true"
      traefik.http.routers.e3.rule: Host(`e1.badger.lan`)
      traefik.http.routers.e3.entryPoints: web
#      traefik.http.services.e3.loadbalancer.server.port: 9003
    ports:
      - 9003:9003
    environment:
      - VIRTUAL_HOST=e3.badger.lan
    volumes:
      - e3_data:/opt/etherpad-lite/var

  support:
    image: etherpad/etherpad:latest
    restart: ${RESTART_POLICY}
    labels:
      traefik.enable: "true"
      traefik.http.routers.support.rule: Host(`support.badger.lan`)
      traefik.http.routers.support.entryPoints: web
#      traefik.http.services.support.loadbalancer.server.port: 9004
    ports:
      - 9004:9004
    environment:
      - VIRTUAL_HOST=support.badger.lan
    volumes:
      - support_data:/opt/etherpad-lite/var
        
#  nginx:
#    image: nginx:latest
#    restart: always
#    ports:
#      - 80:80
#    volumes:
#      - ./nginx/html:/usr/share/nginx/html
#      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  traefik:
    image: docker.io/traefik:${TRAEFIK_RELEASE:-v2.9.8}
    restart: ${RESTART_POLICY}
    command:
     - --api.insecure=true
     - --providers.docker=true
     - --providers.docker.exposedbydefault=true
     - --entrypoints.web.address=:80
     - --entrypoints.web.http.redirections.entryPoint.to=https
     - --entrypoints.web.http.redirections.entryPoint.scheme=https
     - --entrypoints.https.address=:443
     - --certificatesresolvers.le.acme.tlschallenge=true
     - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL?need email for cert expiry notifications}
     - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 8080:8080
      - 443:443
    volumes:
      - traefik:/letsencrypt:rw
      - /run/docker.sock:/var/run/docker.sock:ro
volumes:
  mattermost_data:
    driver: local
  prostrges_data:
    driver: local
  e1_data:
    driver: local
  e2_data:
    driver: local
  e3_data:
    driver: local
  support_data:
    driver: local
#  isoflow_data:
#    driver: local
  portainer_data:
    driver: local
  traefik: { driver: local }

    